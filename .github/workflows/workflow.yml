name: Scully build, test, package, and deploy

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  buildlibs:
    name: Build libraries
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [12.x, 14.x]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ matrix.node }}-${{ secrets.CACHEKEY }}-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build libs and fill NX cache
        run: |
          npm run symlinks
          npm run nx -- run-many --target=build --all --prod

  buildSample:
    name: Build Sample-blog
    needs: buildlibs
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [14.x]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ matrix.node }}-${{secrets.CACHEKEY}}-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build lib using NX cache
        run: |
          npm run symlinks
          npm run nx -- run-many --target=build --all --prod
      - name: build sample-blog
        run: |
          node ./dist/libs/scully/src/scully --tds --project=sample-blog
        env:
          SCULLY_VAULT_DEMO_KEY: ${{ secrets.SCULLY_VAULT_DEMO_KEY }}
      - name: Store sample-blog
        uses: actions/upload-artifact@v2
        with:
          name: static-sites-sample
          path: dist/static/sample-blog

  buildDocs:
    name: Build Docs
    needs: buildlibs
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [14.x]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ matrix.node }}-${{secrets.CACHEKEY}}-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build lib using NX cache
        run: |
          npm run symlinks
          npm run nx -- run-many --target=build --all --prod
      - name: build Scully docs site
        run: |
          node ./dist/libs/scully/src/scully --tds --project=scully-docs
      - name: Store docs-site
        uses: actions/upload-artifact@v2
        with:
          name: static-sites-docs
          path: dist/static/doc-sites

  jest-test:
    name: Run Jest tests
    needs: [buildDocs, buildSample]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [14.x]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ matrix.node }}-${{secrets.CACHEKEY}}-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build lib using NX cache
        run: |
          npm run symlinks
          npm run nx -- run-many --target=build --all --prod
      - name: Download sample-blog and docs-sites
        uses: actions/download-artifact@v2
        with:
          name: static-sites-docs
          path: dist/static/doc-sites
      - uses: actions/download-artifact@v2
        with:
          name: static-sites-sample
          path: dist/static/sample-blog
      - name: Run the tests
        run: |
          npm run jest:test
        env:
          CI: true

  cypress-test:
    name: Run cypres E2E tests
    needs: [buildDocs, buildSample]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [14.x]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ matrix.node }}-${{secrets.CACHEKEY}}-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build lib using NX cache
        run: |
          npm run symlinks
          npm run nx -- run-many --target=build --all --prod
      - name: Download sample-blog and docs-sites
        uses: actions/download-artifact@v2
        with:
          name: static-sites-docs
          path: dist/static/doc-sites
      - uses: actions/download-artifact@v2
        with:
          name: static-sites-sample
          path: dist/static/sample-blog
      - name: Run the tests
        run: |
          npm run cypress:install
          npm run cypress:e2e:server
        env:
          CI: true

  npm_publish:
    name: Publish updated libs to npm under develop tag
    if: ${{ github.event.label.name == 'approved' }}
    needs: [jest-test, cypress-test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [14.x]
    steps:
      - name: Checking out
        uses: actions/checkout@master
      - name: Installing node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node }}
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ matrix.node }}-${{secrets.CACHEKEY}}-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build lib using NX cache
        run: |
          npm run symlinks
          npm run nx -- run-many --target=build --all --prod
      - name: Deploy the packages
        run: |
          npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
          npm run auto-publish-nightly
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Commit changed releaseChecksums
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Bot update of releaseChecksums.json

          # Optional options appended to `git-commit`
          # See https://git-scm.com/docs/git-commit for a list of available options
          commit_options: '--no-verify --signoff'
          file_pattern: releaseChecksums.json

          # Optional commit user and author settings
          # commit_user_name: My GitHub Actions Bot # defaults to "GitHub Actions"
          # commit_user_email: my-github-actions-bot@example.org # defaults to "actions@github.com"
          # commit_author: Author <actions@github.com> # defaults to author of the commit that triggered the run

          # Optional tag message
          # Action will create and push a new tag to the remote repository and the defined branch
          # tagging_message: 'v1.0.0'

          # Optional options appended to `git-push`
          # See git-push documentation for details: https://git-scm.com/docs/git-push#_options
          push_options: '--force'

          # Optional: Disable dirty check and always try to create a commit and push
          skip_dirty_check: false

          # Optional: Skip internal call to `git fetch`
          skip_fetch: true

  testnewApp:
    name: Test if we can create a new app
    if: ${{ github.event.label.name == 'approved' }}
    needs: npm_publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        prop:
          [
            { node: 12, angular: 10 },
            { node: 12, angular: 11 },
            { node: 14, angular: 10 },
            { node: 14, angular: 11 },
          ]
    steps:
      - name: Setup angular project and run all tests
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.prop.node }}
        env:
          CI: true
      - run: export NG_CLI_ANALYTICS=false false
      - run: npm i @angular/cli@${{ matrix.prop.angular }} @scullyio/scully@develop @scullyio/ng-lib@develop
      - run: npx ng new demo --skipGit  --routing --style css --minimal --strict
      - run: cd demo && npx ng g m home --route home --module app.module
      - run: cd demo && npx ng g m about --route about --module app.module
      - run: cd demo && npx ng add @scullyio/init@develop
      - run: cd demo && npx ng g @scullyio/init:blog
      - run: cd demo && npx ng build
      - run: cd demo && npx scully --noPrompt
