{"version":3,"sources":["/home/sander/Documents/werk/scully/dist/scullyio/ng-lib/__ivy_ngcc__/fesm2015/scullyio-ng-lib.js","./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACoI;AAC7F;AACE;AAC+B;AAC/D;;AAE3C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACwC;AACE;;AAE1C;AACA,uBAAuB;AACvB,WAAW,EAKV;AACD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,2BAA2B,oDAAe;AAC1C;AACA;AACA,SAAS;AACT,uCAAuC,4DAAK;AAC5C,wDAAwD,mCAAmC;AAC3F,mDAAmD,mCAAmC;AACtF,uDAAuD,mCAAmC;AAC1F;AACA;AACA;AACA,sBAAsB,6DAAM;AAC5B,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,gCAAgC,6DAAa,0CAA0C,0DAAG;AAC1F,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB,mCAAmC,2DAAI;AACvC,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AAC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ACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAKV;AACD;AACA;AACA,UAAU;AACV;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,+CAA+C,2DAAI;AACnD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,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","file":"main-es2015.js","sourcesContent":["import { __awaiter } from 'tslib';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgModule, Inject } from '@angular/core';\nimport { NavigationEnd, Router, NavigationStart } from '@angular/router';\nimport { BehaviorSubject, ReplaySubject, of, EMPTY, forkJoin } from 'rxjs';\nimport { pluck, filter, tap, take, switchMap, catchError, map, shareReplay, first } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/idleMonitor/idle-monitor.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\n\nconst _c0 = [\"*\"];\nfunction LocalState() { }\nif (false) {\n    /** @type {?} */\n    LocalState.prototype.idle;\n    /** @type {?} */\n    LocalState.prototype.timeOut;\n}\nclass IdleMonitorService {\n    /**\n     * @param {?} zone\n     * @param {?} router\n     */\n    constructor(zone, router) {\n        this.zone = zone;\n        this.router = router;\n        this.imState = new BehaviorSubject({\n            idle: false,\n            timeOut: 5 * 1000,\n        });\n        this.idle$ = this.imState.pipe(pluck('idle'));\n        this.initApp = new Event('AngularInitialized', { bubbles: true, cancelable: false });\n        this.appReady = new Event('AngularReady', { bubbles: true, cancelable: false });\n        this.appTimeout = new Event('AngularTimeout', { bubbles: true, cancelable: false });\n        if (window) {\n            window.dispatchEvent(this.initApp);\n            this.router.events\n                .pipe(filter((/**\n             * @param {?} ev\n             * @return {?}\n             */\n            ev => ev instanceof NavigationEnd && ev.urlAfterRedirects !== undefined)), tap((/**\n             * @return {?}\n             */\n            () => this.zoneIdleCheck())))\n                .subscribe();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.idle$.pipe(take(1)).toPromise();\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    zoneIdleCheck() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Zone === undefined) {\n                return this.simpleTimeout();\n            }\n            /** @type {?} */\n            const taskTrackingZone = Zone.current.get('TaskTrackingZone');\n            if (taskTrackingZone === undefined) {\n                return this.simpleTimeout();\n            }\n            if (this.imState.value.idle) {\n                yield this.setState('idle', false);\n            }\n            /** run the actual check for 'idle' outsides zone, otherwise it will never come to an end. */\n            this.zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                let tCancel;\n                /** @type {?} */\n                let count = 0;\n                /** @type {?} */\n                const startTime = Date.now();\n                /** @type {?} */\n                const monitor = (/**\n                 * @return {?}\n                 */\n                () => {\n                    clearTimeout(tCancel);\n                    // console.table(taskTrackingZone.macroTasks);\n                    if (Date.now() - startTime > 30 * 1000) {\n                        /** bail out after 30 seconds. */\n                        window.dispatchEvent(this.appTimeout);\n                        return;\n                    }\n                    if ((taskTrackingZone.macroTasks.length > 0 &&\n                        taskTrackingZone.macroTasks.find((/**\n                         * @param {?} z\n                         * @return {?}\n                         */\n                        (z) => z.source.includes('XMLHttpRequest'))) !== undefined) ||\n                        count < 1 // make sure it runs at least once!\n                    ) {\n                        tCancel = setTimeout((/**\n                         * @return {?}\n                         */\n                        () => {\n                            count += 1;\n                            monitor();\n                        }), 50);\n                        return;\n                    }\n                    window.dispatchEvent(this.appReady);\n                    this.setState('idle', true);\n                });\n                monitor();\n            }));\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    simpleTimeout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /** zone not available, use a timeout instead. */\n            console.warn('Scully is using timeouts, add the needed polyfills instead!');\n            yield new Promise((/**\n             * @param {?} r\n             * @return {?}\n             */\n            r => setTimeout(r, this.imState.value.timeOut)));\n            window.dispatchEvent(this.appReady);\n        });\n    }\n    /**\n     * @param {?} milliseconds\n     * @return {?}\n     */\n    setPupeteerTimoutValue(milliseconds) {\n        this.imState.next(Object.assign(Object.assign({}, this.imState.value), { timeOut: milliseconds }));\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    setState(key, value) {\n        this.imState.next(Object.assign(Object.assign({}, this.imState.value), { [key]: value }));\n    }\n}\nIdleMonitorService.ɵfac = function IdleMonitorService_Factory(t) { return new (t || IdleMonitorService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };\n/** @nocollapse */\nIdleMonitorService.ctorParameters = () => [\n    { type: NgZone },\n    { type: Router }\n];\n/** @nocollapse */ IdleMonitorService.ɵprov = ɵɵdefineInjectable({ factory: function IdleMonitorService_Factory() { return new IdleMonitorService(ɵɵinject(NgZone), ɵɵinject(Router)); }, token: IdleMonitorService, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IdleMonitorService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Router }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    IdleMonitorService.prototype.imState;\n    /** @type {?} */\n    IdleMonitorService.prototype.idle$;\n    /**\n     * @type {?}\n     * @private\n     */\n    IdleMonitorService.prototype.initApp;\n    /**\n     * @type {?}\n     * @private\n     */\n    IdleMonitorService.prototype.appReady;\n    /**\n     * @type {?}\n     * @private\n     */\n    IdleMonitorService.prototype.appTimeout;\n    /**\n     * @type {?}\n     * @private\n     */\n    IdleMonitorService.prototype.zone;\n    /**\n     * @type {?}\n     * @private\n     */\n    IdleMonitorService.prototype.router;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/fetchHttp.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} url\n * @param {?=} responseType\n * @return {?}\n */\nfunction fetchHttp(url, responseType = 'json') {\n    return new Promise((/**\n     * @param {?} resolve\n     * @param {?} reject\n     * @return {?}\n     */\n    (resolve, reject) => {\n        /** @type {?} */\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = responseType;\n        xhr.addEventListener('load', (/**\n         * @param {?} ev\n         * @return {?}\n         */\n        ev => resolve(xhr.response)));\n        xhr.addEventListener('error', (/**\n         * @param {...?} err\n         * @return {?}\n         */\n        (...err) => reject(err)));\n        xhr.open('get', url, true);\n        xhr.send();\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/route-service/scully-routes.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction ScullyRoute() { }\nif (false) {\n    /** @type {?} */\n    ScullyRoute.prototype.route;\n    /** @type {?|undefined} */\n    ScullyRoute.prototype.title;\n    /** @type {?|undefined} */\n    ScullyRoute.prototype.slugs;\n    /** @type {?|undefined} */\n    ScullyRoute.prototype.published;\n    /** @type {?|undefined} */\n    ScullyRoute.prototype.slug;\n    /** @type {?|undefined} */\n    ScullyRoute.prototype.sourceFile;\n    /* Skipping unhandled member: [prop: string]: any;*/\n}\nclass ScullyRoutesService {\n    constructor() {\n        this.refresh = new ReplaySubject(1);\n        this.allRoutes$ = this.refresh.pipe(switchMap((/**\n         * @return {?}\n         */\n        () => fetchHttp('/assets/scully-routes.json'))), catchError((/**\n         * @return {?}\n         */\n        () => {\n            console.warn('Scully routes file not found, are you running the Scully generated version of your site?');\n            return of((/** @type {?} */ ([])));\n        })), \n        /** filter out all non-array results */\n        filter((/**\n         * @param {?} routes\n         * @return {?}\n         */\n        routes => Array.isArray(routes))), map(this.cleanDups), shareReplay({ refCount: false, bufferSize: 1 }));\n        this.available$ = this.allRoutes$.pipe(map((/**\n         * @param {?} list\n         * @return {?}\n         */\n        list => list.filter((/**\n         * @param {?} r\n         * @return {?}\n         */\n        r => (r.hasOwnProperty('published') ? r.published !== false : true))))), shareReplay({ refCount: false, bufferSize: 1 }));\n        this.unPublished$ = this.allRoutes$.pipe(map((/**\n         * @param {?} list\n         * @return {?}\n         */\n        list => list.filter((/**\n         * @param {?} r\n         * @return {?}\n         */\n        r => (r.hasOwnProperty('published') ? r.published === false : false))))), shareReplay({ refCount: false, bufferSize: 1 }));\n        this.topLevel$ = this.available$.pipe(map((/**\n         * @param {?} routes\n         * @return {?}\n         */\n        routes => routes.filter((/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => !r.route.slice(1).includes('/'))))), shareReplay({ refCount: false, bufferSize: 1 }));\n        /** kick off first cycle */\n        this.reload();\n    }\n    /**\n     * @return {?}\n     */\n    getCurrent() {\n        if (!location) {\n            /** probably not in a browser, no current location available */\n            return of();\n        }\n        /** @type {?} */\n        const curLocation = location.pathname.trim();\n        return this.available$.pipe(map((/**\n         * @param {?} list\n         * @return {?}\n         */\n        list => list.find((/**\n         * @param {?} r\n         * @return {?}\n         */\n        r => curLocation === r.route.trim() ||\n            (r.slugs && Array.isArray(r.slugs) && r.slugs.find((/**\n             * @param {?} slug\n             * @return {?}\n             */\n            slug => curLocation.endsWith(slug.trim())))))))));\n    }\n    /**\n     * @param {?} routes\n     * @return {?}\n     */\n    cleanDups(routes) {\n        /** @type {?} */\n        const m = new Map();\n        routes.forEach((/**\n         * @param {?} r\n         * @return {?}\n         */\n        r => m.set(r.sourceFile || r.route, r)));\n        return [...m.values()];\n    }\n    /**\n     * @return {?}\n     */\n    reload() {\n        this.refresh.next();\n    }\n}\nScullyRoutesService.ɵfac = function ScullyRoutesService_Factory(t) { return new (t || ScullyRoutesService)(); };\n/** @nocollapse */\nScullyRoutesService.ctorParameters = () => [];\n/** @nocollapse */ ScullyRoutesService.ɵprov = ɵɵdefineInjectable({ factory: function ScullyRoutesService_Factory() { return new ScullyRoutesService(); }, token: ScullyRoutesService, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScullyRoutesService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ScullyRoutesService.prototype.refresh;\n    /** @type {?} */\n    ScullyRoutesService.prototype.allRoutes$;\n    /** @type {?} */\n    ScullyRoutesService.prototype.available$;\n    /** @type {?} */\n    ScullyRoutesService.prototype.unPublished$;\n    /** @type {?} */\n    ScullyRoutesService.prototype.topLevel$;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/findComments.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an array of nodes coninting all the html comments in the element.\n * When a searchText is given this is narrowed down to only comments that contian this text\n * @param {?} rootElem Element to search nto\n * @param {?=} searchText optional string that needs to be in a HTML comment\n * @return {?}\n */\nfunction findComments(rootElem, searchText) {\n    /** @type {?} */\n    const comments = [];\n    // Fourth argument, which is actually obsolete according to the DOM4 standard, seems required in IE 11\n    /** @type {?} */\n    const iterator = document.createNodeIterator(rootElem, NodeFilter.SHOW_COMMENT, {\n        acceptNode: (/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            // Logic to determine whether to accept, reject or skip node\n            // In this case, only accept nodes that have content\n            // that is containing our searchText, by rejecting any other nodes.\n            if (searchText && node.nodeValue && !node.nodeValue.includes(searchText)) {\n                return NodeFilter.FILTER_REJECT;\n            }\n            return NodeFilter.FILTER_ACCEPT;\n        }),\n    }\n    // , false // IE-11 support requires this parameter.\n    );\n    /** @type {?} */\n    let curNode;\n    // tslint:disable-next-line: no-conditional-assignment\n    while ((curNode = iterator.nextNode())) {\n        comments.push(curNode);\n    }\n    return comments;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/scully-content/scully-content.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction ScullyContent() { }\nif (false) {\n    /** @type {?} */\n    ScullyContent.prototype.html;\n    /** @type {?} */\n    ScullyContent.prototype.cssId;\n}\n/**\n * this is needed, because otherwise the CLI borks while building\n * @type {?}\n */\nconst scullyBegin = '<!--scullyContent-begin-->';\n/** @type {?} */\nconst scullyEnd = '<!--scullyContent-end-->';\nclass ScullyContentComponent {\n    /**\n     * @param {?} elmRef\n     * @param {?} srs\n     * @param {?} router\n     */\n    constructor(elmRef, srs, router) {\n        this.elmRef = elmRef;\n        this.srs = srs;\n        this.router = router;\n        this.elm = (/** @type {?} */ (this.elmRef.nativeElement));\n        /**\n         * pull in all  available routes into an eager promise\n         */\n        this.routes = this.srs.available$.pipe(take(1)).toPromise();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // /** make sure the idle-check is loaded. */\n        // this.idle.init();\n        if (this.elm) {\n            /** this will only fire in a browser environment */\n            this.handlePage();\n        }\n    }\n    /**\n     * Loads the static content from scully into the view\n     * Will fetch the content from sibling links with xmlHTTPrequest\n     * @private\n     * @return {?}\n     */\n    handlePage() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /** @type {?} */\n            const template = document.createElement('template');\n            /** @type {?} */\n            const currentCssId = this.getCSSId(this.elm);\n            if (window.scullyContent) {\n                /**\n                 * upgrade existing static content\n                 * @type {?}\n                 */\n                const htmlString = window.scullyContent.html;\n                if (currentCssId !== window.scullyContent.cssId) {\n                    /** replace the angular cssId */\n                    template.innerHTML = htmlString.split(window.scullyContent.cssId).join(currentCssId);\n                }\n                else {\n                    template.innerHTML = htmlString;\n                }\n            }\n            else {\n                /** @type {?} */\n                const curPage = location.href;\n                /**\n                 *   NOTE\n                 * when updateting the texts for the errors, make sure you leave the\n                 *  `id=\"___scully-parsing-error___\"`\n                 * in there. That way users can detect rendering errors in their CI\n                 * on a reliable way.\n                 */\n                yield fetchHttp(curPage, 'text')\n                    .then((/**\n                 * @param {?} html\n                 * @return {?}\n                 */\n                (html) => {\n                    try {\n                        /** @type {?} */\n                        const htmlString = html.split(scullyBegin)[1].split(scullyEnd)[0];\n                        if (htmlString.includes('_ngcontent')) {\n                            /**\n                             * update the angular cssId\n                             * @type {?}\n                             */\n                            const atr = '_ngcontent' + htmlString.split('_ngcontent')[1].split('=')[0];\n                            template.innerHTML = htmlString.split(atr).join(currentCssId);\n                        }\n                    }\n                    catch (e) {\n                        template.innerHTML = `<h2 id=\"___scully-parsing-error___\">Sorry, could not parse static page content</h2>\n            <p>This might happen if you are not using the static generated pages.</p>`;\n                    }\n                }))\n                    .catch((/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                e => {\n                    template.innerHTML =\n                        '<h2 id=\"___scully-parsing-error___\">Sorry, could not load static page content</h2>';\n                    console.error('problem during loading static scully content', e);\n                }));\n            }\n            /**\n             * insert the whole thing just before the `<scully-content>` element\n             * @type {?}\n             */\n            const parent = this.elm.parentElement || document.body;\n            /** @type {?} */\n            const begin = document.createComment('scullyContent-begin');\n            /** @type {?} */\n            const end = document.createComment('scullyContent-end');\n            parent.insertBefore(begin, this.elm);\n            parent.insertBefore(template.content, this.elm);\n            parent.insertBefore(end, this.elm);\n            /** upgrade all hrefs to simulated routelinks  */\n            document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this));\n        });\n    }\n    /**\n     * upgrade a **href** attributes to links that respect the Angular router\n     * and don't do a full page reload. Only works on links that are found in the\n     * Scully route config file.\n     * @param {?} elm the element containing the **hrefs**\n     * @return {?}\n     */\n    upgradeToRoutelink(elm) {\n        return __awaiter(this, void 0, void 0, function* () {\n            /** @type {?} */\n            const routes = yield this.routes;\n            /** @type {?} */\n            const lnk = elm.getAttribute('href').toLowerCase();\n            /** @type {?} */\n            const route = routes.find((/**\n             * @param {?} r\n             * @return {?}\n             */\n            r => r.route.toLowerCase() === lnk));\n            /** only upgrade routes known by scully. */\n            if (lnk && route) {\n                elm.onclick = (/**\n                 * @param {?} ev\n                 * @return {?}\n                 */\n                (ev) => __awaiter(this, void 0, void 0, function* () {\n                    /** @type {?} */\n                    const splitRoute = route.route.split(`/`);\n                    /** @type {?} */\n                    const curSplit = location.pathname.split('/');\n                    // loose last \"part\" of route\n                    curSplit.pop();\n                    ev.preventDefault();\n                    /** @type {?} */\n                    const routed = yield this.router.navigate(splitRoute).catch((/**\n                     * @param {?} e\n                     * @return {?}\n                     */\n                    e => {\n                        console.error('routing error', e);\n                        return false;\n                    }));\n                    if (!routed) {\n                        return;\n                    }\n                    /** delete the content, as it is now out of date! */\n                    window.scullyContent = undefined;\n                    /** check for the same route with different \"data\", and NOT a level higher (length) */\n                    if (curSplit.every((/**\n                     * @param {?} part\n                     * @param {?} i\n                     * @return {?}\n                     */\n                    (part, i) => splitRoute[i] === part)) && splitRoute.length > curSplit.length) {\n                        /**\n                         * as Angular doesn't destroy the component if we stay on the same page,\n                         * we have to manually delete old content. Also we need to kick of loading\n                         * the new content. handlePage() takes care of that.\n                         */\n                        setTimeout((/**\n                         * @return {?}\n                         */\n                        () => {\n                            /** @type {?} */\n                            const p = this.elm.parentElement;\n                            /** @type {?} */\n                            let cur = (/** @type {?} */ (findComments(p, 'scullyContent-begin')[0]));\n                            /** @type {?} */\n                            let next;\n                            do {\n                                next = cur.nextSibling;\n                                p.removeChild(cur);\n                                cur = next;\n                            } while (next && next !== this.elm);\n                            // tslint:disable-next-line: no-string-literal\n                            this.handlePage();\n                        }), 10); // a small delay, so we are sure the angular parts in the page are settled enough\n                    }\n                }));\n            }\n        });\n    }\n    /**\n     * @param {?} elm\n     * @return {?}\n     */\n    getCSSId(elm) {\n        return elm.getAttributeNames().find((/**\n         * @param {?} a\n         * @return {?}\n         */\n        a => a.startsWith('_ngcontent'))) || 'none_found';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { }\n}\nScullyContentComponent.ɵfac = function ScullyContentComponent_Factory(t) { return new (t || ScullyContentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScullyRoutesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router)); };\nScullyContentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ScullyContentComponent, selectors: [[\"scully-content\"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ScullyContentComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\"\\n      :host {\\n        display: none;\\n      }\\n      scully-content {\\n        display: none;\\n      }\\n    \"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nScullyContentComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScullyRoutesService },\n    { type: Router }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScullyContentComponent, [{\n        type: Component,\n        args: [{\n                // tslint:disable-next-line: component-selector\n                selector: 'scully-content',\n                template: '<ng-content></ng-content>',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: true,\n                styles: [`\n      :host {\n        display: none;\n      }\n      scully-content {\n        display: none;\n      }\n    `]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScullyRoutesService }, { type: ɵngcc1.Router }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    ScullyContentComponent.prototype.elm;\n    /**\n     * pull in all  available routes into an eager promise\n     * @type {?}\n     */\n    ScullyContentComponent.prototype.routes;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScullyContentComponent.prototype.elmRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScullyContentComponent.prototype.srs;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScullyContentComponent.prototype.router;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/scully-content/scully-content.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScullyContentModule {\n}\nScullyContentModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScullyContentModule });\nScullyContentModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ScullyContentModule_Factory(t) { return new (t || ScullyContentModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScullyContentModule, { declarations: [ScullyContentComponent], exports: [ScullyContentComponent] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScullyContentModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [ScullyContentComponent],\n                exports: [ScullyContentComponent]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/scully-lib.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScullyLibModule {\n    /**\n     * We use a little trick to get a working idle-service.\n     * First, we separate out the component in a separate module to prevent a circulair injection\n     * second we create a constuctor that activates the IdleMonitorService. as that is provided for 'root'\n     * there will be only 1 instance in our app.\n     * We don't need forRoot, as we are not configuring anything in here.\n     * @param {?} idle\n     */\n    constructor(idle) {\n        this.idle = idle;\n    }\n}\nScullyLibModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScullyLibModule });\nScullyLibModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ScullyLibModule_Factory(t) { return new (t || ScullyLibModule)(ɵngcc0.ɵɵinject(IdleMonitorService)); }, imports: [[ScullyContentModule],\n        ScullyContentModule] });\n/** @nocollapse */\nScullyLibModule.ctorParameters = () => [\n    { type: IdleMonitorService }\n];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScullyLibModule, { imports: [ScullyContentModule], exports: [ScullyContentModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScullyLibModule, [{\n        type: NgModule,\n        args: [{\n                imports: [ScullyContentModule],\n                exports: [ScullyContentModule]\n            }]\n    }], function () { return [{ type: IdleMonitorService }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ScullyLibModule.prototype.idle;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/isScully.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// tslint:disable: no-string-literal\n/** @type {?} */\nconst isScullyRunning = (/**\n * @return {?}\n */\n() => window && window['ScullyIO'] === 'running');\n/** @type {?} */\nconst isScullyGenerated = (/**\n * @return {?}\n */\n() => window && window['ScullyIO'] === 'generated');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/transfer-state/transfer-state.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SCULLY_SCRIPT_ID = `scully-transfer-state`;\n/** @type {?} */\nconst SCULLY_STATE_START = `/** ___SCULLY_STATE_START___ */`;\n/** @type {?} */\nconst SCULLY_STATE_END = `/** ___SCULLY_STATE_END___ */`;\n/**\n * @record\n */\nfunction State() { }\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/**\n * \\@dynamic\n */\nclass TransferStateService {\n    /**\n     * @param {?} document\n     * @param {?} router\n     */\n    constructor(document, router) {\n        this.document = document;\n        this.router = router;\n        this.isNavigatingBS = new BehaviorSubject(false);\n        this.stateBS = new BehaviorSubject({});\n        this.state$ = this.isNavigatingBS.pipe(switchMap((/**\n         * @param {?} isNav\n         * @return {?}\n         */\n        isNav => (isNav ? EMPTY : this.stateBS.asObservable()))));\n        this.setupEnvForTransferState();\n        this.setupNavStartDataFetching();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    setupEnvForTransferState() {\n        if (isScullyRunning()) {\n            // In Scully puppeteer\n            this.script = this.document.createElement('script');\n            this.script.setAttribute('id', SCULLY_SCRIPT_ID);\n            this.document.head.appendChild(this.script);\n        }\n        else if (isScullyGenerated()) {\n            // On the client AFTER scully rendered it\n            this.stateBS.next((window && window[SCULLY_SCRIPT_ID]) || {});\n        }\n    }\n    /**\n     * Getstate will return an observable that fires once and completes.\n     * It does so right after the navigation for the page has finished.\n     * @template T\n     * @param {?} name The name of the state to\n     * @return {?}\n     */\n    getState(name) {\n        return this.state$.pipe(pluck(name));\n    }\n    /**\n     * @template T\n     * @param {?} name\n     * @param {?} val\n     * @return {?}\n     */\n    setState(name, val) {\n        /** @type {?} */\n        const newState = Object.assign(Object.assign({}, this.stateBS.value), { [name]: val });\n        this.stateBS.next(newState);\n        if (isScullyRunning()) {\n            this.script.textContent = `window['${SCULLY_SCRIPT_ID}']=${SCULLY_STATE_START}${JSON.stringify(newState)}${SCULLY_STATE_END}`;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    setupNavStartDataFetching() {\n        /**\n         * Each time the route changes, get the Scully state from the server-rendered page\n         */\n        if (!isScullyGenerated()) {\n            return;\n        }\n        this.router.events\n            .pipe(filter((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => e instanceof NavigationStart)), switchMap((/**\n         * @param {?} e\n         * @return {?}\n         */\n        (e) => {\n            this.isNavigatingBS.next(true);\n            return forkJoin([\n                /** prevent emitting before navigation to _this_ URL is done. */\n                this.router.events.pipe(filter((/**\n                 * @param {?} ev\n                 * @return {?}\n                 */\n                ev => ev instanceof NavigationEnd && ev.url === e.url)), first()),\n                // Get the next route's page from the server\n                fetchHttp(e.url + '/index.html', 'text').catch((/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                err => {\n                    console.warn('Failed transfering state from route', err);\n                    return '';\n                })),\n            ]);\n        })), \n        /** parse out the relevant piece off text, and conver to json */\n        map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([e, html]) => {\n            try {\n                /** @type {?} */\n                const newStateStr = html.split(SCULLY_STATE_START)[1].split(SCULLY_STATE_END)[0];\n                return JSON.parse(newStateStr);\n            }\n            catch (_a) {\n                return null;\n            }\n        })), \n        /** prevent progressing in case anything went sour above */\n        filter((/**\n         * @param {?} val\n         * @return {?}\n         */\n        val => val !== null)), \n        /** activate the new state */\n        tap((/**\n         * @param {?} newState\n         * @return {?}\n         */\n        newState => {\n            /** signal to send out update */\n            this.isNavigatingBS.next(false);\n            /** replace the state, so we don't leak memory on old state */\n            this.stateBS.next(newState);\n        })))\n            .subscribe();\n    }\n}\nTransferStateService.ɵfac = function TransferStateService_Factory(t) { return new (t || TransferStateService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };\n/** @nocollapse */\nTransferStateService.ctorParameters = () => [\n    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Router }\n];\n/** @nocollapse */ TransferStateService.ɵprov = ɵɵdefineInjectable({ factory: function TransferStateService_Factory() { return new TransferStateService(ɵɵinject(DOCUMENT), ɵɵinject(Router)); }, token: TransferStateService, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TransferStateService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: Document, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc1.Router }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TransferStateService.prototype.script;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransferStateService.prototype.isNavigatingBS;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransferStateService.prototype.stateBS;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransferStateService.prototype.state$;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransferStateService.prototype.document;\n    /**\n     * @type {?}\n     * @private\n     */\n    TransferStateService.prototype.router;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: scullyio-ng-lib.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { IdleMonitorService, ScullyContentComponent, ScullyContentModule, ScullyLibModule, ScullyRoutesService, TransferStateService, isScullyGenerated, isScullyRunning };\n\n//# sourceMappingURL=scullyio-ng-lib.js.map","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'about',\n    loadChildren: () => import('./about/about.module').then(m => m.AboutModule),\n  },\n  {\n    path: 'home',\n    loadChildren: () => import('./static/static.module').then(m => m.StaticModule),\n  },\n  {\n    path: 'blog',\n    loadChildren: () => import('./blog/blog.module').then(m => m.BlogModule),\n  },\n  {\n    path: 'user',\n    loadChildren: () => import('./user/user.module').then(m => m.UserModule),\n  },\n  {path: 'demo', loadChildren: () => import('./demo/demo.module').then(m => m.DemoModule)},\n  {path: '', redirectTo: '/home', pathMatch: 'full'},\n  {\n    path: '**',\n    loadChildren: () => import('./pagenotfound/pagenotfound.module').then(m => m.PagenotfoundModule),\n  },\n  {path: '', redirectTo: 'home', pathMatch: 'full'},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import {Component} from '@angular/core';\nimport {IdleMonitorService, isScullyGenerated, isScullyRunning} from '@scullyio/ng-lib';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  currentState = isScullyRunning()\n    ? 'rendering inside scully'\n    : isScullyGenerated()\n    ? 'Loaded from static HTML'\n    : 'SPA mode';\n  constructor() {}\n}\n","<header>\n  <h1>\n    Scully demo blog app! <small>{{ currentState }}</small>\n  </h1>\n  <a [routerLink]=\"['/home']\">🏠</a>\n</header>\n\n<main>\n  <router-outlet></router-outlet>\n</main>\n\n<footer>\n  <h3>Made with ❤️ <strong>@HeroDevs</strong></h3>\n</footer>\n","import {HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {ScullyLibModule} from '@scullyio/ng-lib';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, HttpClientModule, AppRoutingModule, ScullyLibModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  platformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n});\n"],"sourceRoot":"webpack:///"}